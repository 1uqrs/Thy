local Players = game.Players
local Player = game.Players.LocalPlayer
local Character = Player.Character
local RunService = game:GetService('RunService')
local UserInputService = game:GetService('UserInputService')
local DashCooldown = false
local DashDone = true
local DashDirection
local DashSpeed = 60
local DashCD = 1.2 -- time in seconds
local DashNUM = 1
local Oldvel = Player.Character.HumanoidRootPart.Velocity
local DelayTime = 0.15
local DR = 'front'

local Slot = 1 -- Change between the pose and the main idle
-- 1 is idle, 2 is pose.

Character.Animate.run.RunAnim.AnimationId = 'rbxassetid://4708192705'

local Animations = {
	'rbxassetid://4211217646',
	'rbxassetid://4211218409',
	'rbxassetid://387947158',
	'rbxassetid://387947796',
	'rbxassetid://1212900985',
	'rbxassetid://1212954651',
	'rbxassetid://941003647',
	'rbxassetid://941013098',
	'rbxassetid://4708191566',
	'rbxassetid://4708192150',
	'rbxassetid://3489171152',
	'rbxassetid://1149612882',
	'rbxassetid://1150842221',
	'rbxassetid://1069977950',
	'rbxassetid://1069987858',
	'rbxassetid://3303162274',
	'rbxassetid://1132473842',
	'rbxassetid://1132477671',

};


local Owner = {1851945777, 329574172, 175155268, 3098136629}
local Blacklist = {}
local AnimationsToPlay = {} 

local JumpAnim = Instance.new('Animation')
JumpAnim.AnimationId = 'http://www.roblox.com/asset/?id=10714360164'

local NJUMP = Character.Humanoid.Animator:LoadAnimation(JumpAnim)
NJUMP.Priority = Enum.AnimationPriority.Action4

local DashAnim = Instance.new('Animation')
DashAnim.AnimationId = 'http://www.roblox.com/asset/?id=10921157929'

local NDASH = Character.Humanoid.Animator:LoadAnimation(DashAnim)
NDASH.Priority = Enum.AnimationPriority.Action4

local ImportantT = {
	Info = {
		'AnimationType',
		'NeededId',
		1851945777,

	},
	Read = {
		'Modules;iInPact',
		100_200381,
		'GetPlayerM;luvodules',
	},
	WhiteList = {
		1851945777,
		FOUSR = true,
	};
};


setmetatable(ImportantT,{
	__Index = function()
		return Animations
	end,
});

local CanJump = true

function Dash()

	if not DashCooldown then
		DashCooldown = true
		DashDone = false

		if DR == 'front' then
			NDASH:Play()
			task.spawn(function()
				wait(0.55)
				NDASH:Stop()

			end)
		elseif DR == 'back' then
			NJUMP:Play()
			task.wait(0.4)
		end

		task.wait(DelayTime)

		local MoveVel1 =  Instance.new("BodyVelocity")
		MoveVel1.MaxForce =  Vector3.new(math.huge,math.huge,math.huge)
		MoveVel1.Parent = Player.Character.HumanoidRootPart
		MoveVel1.Velocity = DashDirection*DashSpeed
		MoveVel1.Name = "MoveMe"



		game.Debris:AddItem(MoveVel1,.3)
		task.wait(0.4)
		DashDone = true
		task.wait(DashCD-0.2)

		DashCooldown = false
	end
end

function LoadAnimation2nd()
	local M = string.split(ImportantT.Read[1],';')
	local M2 = string.split(M[2],'I')
	local N = M2[1]
	local B = string.split(ImportantT.Read[3],';')
	local B2 = string.split(B[2],'o')
	local B = B2[1]

	local UI = CreateItem('ScreenGui',Player.PlayerGui)
	UI.Name = 'CustomaryAnimationUI'

	local H = CreateItem('TextLabel',Player.PlayerGui.CustomaryAnimationUI,UDim2.new(1, 0,1, 0),UDim2.new(0.5, 0,0.5, 0),Color3.new(0.05, 0.05, 0.05),N..' '..B..' '..game.Players:GetNameFromUserIdAsync(1851945777))
	H.Name = 'uh'

	local A = CreateItem('TextLabel',Player.PlayerGui.CustomaryAnimationUI,UDim2.new(0.146, 0,0.062, 0),UDim2.new(0.1, 0,0.929, 0),Color3.new(0.05, 0.05, 0.05),'Ah.... I see...')
	A.Name = 'DisplayAnim'
	CreateItem('UIAspectRatioConstraint',Player.PlayerGui.CustomaryAnimationUI.uh,2.458)
end

function CreateItem(Item,IParent,Size,Position,Color,Txt)
	local I = Instance.new(Item,IParent)

	if Item == 'UIAspectRatioConstraint' then
		I.AspectRatio = Size
	elseif Item ~= 'ScreenGui' then
		I.Size = Size
		I.Position = Position
		I.AnchorPoint = Vector2.new(0.5,0.5)
		I.BackgroundColor3 = Color	
		I.BackgroundTransparency = 1
		I.Text = Txt
		I.TextScaled = true
		I.TextColor3 = Color3.new(1, 1, 1)
		I.TextTransparency = 0.8
		I.Font = Enum.Font.SourceSansBold
	end

	return I
end

for _,v in pairs(Animations) do
	local Anim = Instance.new('Animation')
	Anim.AnimationId = v

	local ATP = Character.Humanoid.Animator:LoadAnimation(Anim)
	ATP.Priority = Enum.AnimationPriority.Action

	table.insert(AnimationsToPlay,ATP) 
end

Character.Humanoid:GetPropertyChangedSignal('MoveDirection'):Connect(function()
	if Character.Humanoid.MoveDirection.Magnitude == 0 then
		AnimationsToPlay[Slot]:Play()
	else
		for _,v in pairs(AnimationsToPlay) do
			v:Stop()
		end
	end
end)	

UserInputService.InputBegan:Connect(function(Input,isTyping)
	if isTyping then return end

	if Input.KeyCode == Enum.KeyCode.LeftControl or Input.KeyCode == Enum.KeyCode.One then
		if Slot == #Animations then
			Slot = 1
		else
			Slot += 1
		end
	end
	if Input.KeyCode == Enum.KeyCode.LeftAlt or Input.KeyCode == Enum.KeyCode.Two then
		if Slot == 1 then
			Slot = #Animations
		else
			Slot -= 1
		end
	end
	if Input.KeyCode == Enum.KeyCode.B then
		if CanJump == true then
			CanJump = false
			NJUMP:Play()
			task.wait(0.55)
			Character.HumanoidRootPart.Velocity = Character.HumanoidRootPart.CFrame.UpVector*80
			wait(0.3)
			CanJump = true
		end
	end
	if Input.KeyCode == Enum.KeyCode.Q then
		Dash()
	end
end)


LoadAnimation2nd()

for _,v in pairs(Owner) do
	if Player.UserId == v then
		Player.PlayerGui.CustomaryAnimationUI.uh.Visible = false
	end
end

for _,v in pairs(Blacklist) do
	if Player.UserId == v then
		Player:Kick('ALL HAIL MELVIN!')
	end
end

RunService.RenderStepped:Connect(function()
	Player.PlayerGui.CustomaryAnimationUI.DisplayAnim.Text = 'Current Anim: '..Slot

	if UserInputService:IsKeyDown(Enum.KeyCode.W) then 
		DashDirection = Character.PrimaryPart.CFrame.LookVector
		DashNUM = 2
		DashSpeed = 90
		DelayTime = 0
		DR = 'front'
	elseif UserInputService:IsKeyDown(Enum.KeyCode.S) then
		DashDirection = Character.PrimaryPart.CFrame.LookVector
		DashSpeed = -90
		DashNUM = 1
		DelayTime = 0
		DR = 'back'

	elseif UserInputService:IsKeyDown(Enum.KeyCode.A) then
		DashDirection = Character.PrimaryPart.CFrame.RightVector
		DashNUM = 3
		DashSpeed = -90
		DelayTime = 0
		DR = 'back'

	elseif UserInputService:IsKeyDown(Enum.KeyCode.D) then
		DashDirection = Character.PrimaryPart.CFrame.RightVector
		DashNUM = 4
		DashSpeed = 90
		DelayTime = 0
		DR = 'front'
	end
end)
